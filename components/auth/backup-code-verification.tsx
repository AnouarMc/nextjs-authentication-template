import AuthCard from "@/components/auth/auth-card";
import FormError from "@/components/auth/form-error";
import { signInWithTwoFactor } from "@/actions/signin";

import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormMessage,
  FormLabel,
} from "@/components/ui/form";
import { Loader2 } from "lucide-react";
import { useForm } from "react-hook-form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { zodResolver } from "@hookform/resolvers/zod";
import { backupCodeSchema, backupCodeSchemaType } from "@/schemas";

const BackupCodeVerification = ({
  onAlternatives,
}: {
  onAlternatives: () => void;
}) => {
  const form = useForm<backupCodeSchemaType>({
    resolver: zodResolver(backupCodeSchema),
    defaultValues: {
      otpCode: "",
    },
  });
  const { isSubmitting, errors } = form.formState;
  const onTwoFactorSubmit = form.handleSubmit(async ({ otpCode }) => {
    const { success, errors } = await signInWithTwoFactor(
      otpCode,
      "backup-code"
    );
    if (!success) {
      errors?.forEach(({ name, message }) =>
        form.setError(name as keyof backupCodeSchemaType, { message })
      );
    }
  });

  return (
    <AuthCard
      title="Two-step verification"
      subtitle="To continue, please enter the verification code generated by your authenticator app"
      footer={
        <Button onClick={onAlternatives} variant="link">
          Use your authenticator app
        </Button>
      }
    >
      <Form {...form}>
        <form onSubmit={onTwoFactorSubmit} className="space-y-6 text-left">
          <FormError message={errors.root?.message} />
          <FormField
            control={form.control}
            name="otpCode"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Backup Code</FormLabel>

                <FormControl>
                  <Input autoFocus {...field} disabled={isSubmitting} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <Button className="w-full" type="submit" disabled={isSubmitting}>
            {isSubmitting ? <Loader2 className="animate-spin" /> : "Continue"}
          </Button>
        </form>
      </Form>
    </AuthCard>
  );
};
export default BackupCodeVerification;
